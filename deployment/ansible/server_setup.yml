---
- name: Server Setup Playbook
  hosts: all
  become: yes
  vars:
    firewall_ports:
      - "22/tcp"
      - "80/tcp"
      - "443/tcp"
    packages:
      - curl
      - git
      - vim
      - htop
      - wget
      - ufw
      - nginx
      - mysql-server
      - python3
      - python3-pip
    users:
      - username: nate
        groups: sudo
      - username: paul
        groups: sudo
    docker_compose_version: "1.29.2"
    docker_apt_url: "https://download.docker.com/linux/ubuntu"
    docker_gpg_key_url: "https://download.docker.com/linux/ubuntu/gpg"

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install necessary packages
      apt:
        name: "{{ packages }}"
        state: present

    - name: Ensure UFW is installed
      apt:
        name: ufw
        state: present

    - name: Allow necessary firewall ports
      ufw:
        rule: allow
        port: "{{ item }}"
      with_items: "{{ firewall_ports }}"
      notify: Enable UFW

    - name: Add users and set up groups
      user:
        name: "{{ item.username }}"
        groups: "{{ item.groups }}"
        state: present
      with_items: "{{ users }}"

    - name: Set up SSH key for users
      authorized_key:
        user: "{{ item.username }}"
        key: "{{ lookup('file', '/home/{{ item.username }}/.ssh/id_rsa.pub') }}"
      with_items: "{{ users }}"

    - name: Install Docker's GPG key
      apt_key:
        url: "{{ docker_gpg_key_url }}"
        state: present

    - name: Add Docker's APT repository
      apt_repository:
        repo: deb [arch=amd64] {{ docker_apt_url }} {{ ansible_distribution_release }} stable
        state: present

    - name: Update APT cache after adding Docker repository
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Add nate and paul to Docker group
      user:
        name: "{{ item.username }}"
        groups: docker
        append: yes
      with_items: "{{ users }}"

    - name: Enable UFW firewall
      ufw:
        state: enabled

    - name: Install Nginx
      apt:
        name: nginx
        state: present

    - name: Enable and start Nginx service
      systemd:
        name: nginx
        enabled: yes
        state: started

    - name: Configure Nginx
      template:
        src: templates/nginx.conf.j2
        dest: /nginx/nginx.conf
        mode: '0644'
      notify: Restart Nginx

    - name: Install MySQL
      apt:
        name: mysql-server
        state: present

    - name: Ensure MySQL is running and enabled
      systemd:
        name: mysql
        enabled: yes
        state: started

    - name: Harden MySQL installation (non-interactive)
      shell: |
        mysql_secure_installation <<EOF
        n
        rootpassword
        rootpassword
        y
        y
        y
        y
        EOF

    - name: Configure MySQL root password
      mysql_user:
        login_user: root
        login_password: rootpassword
        name: root
        password: rootpassword
        host_all: yes
        priv: "*.*:ALL,GRANT"
        state: present

    - name: Configure and secure MySQL remote access
      lineinfile:
        path: /mysql/mysql.conf.d/mysqld.cnf
        regexp: '^bind-address'
        line: 'bind-address = 0.0.0.0'
      notify: Restart MySQL

  handlers:
    - name: Enable UFW
      ufw:
        state: enabled
        port: "{{ firewall_ports }}"
        immediate: yes

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted

    - name: Restart MySQL
      systemd:
        name: mysql
        state: restarted